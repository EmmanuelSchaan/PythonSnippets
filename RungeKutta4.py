#########################################################################################################################
#######################                    solves  dx/dt = f(x, t)                                #######################                       
#########################################################################################################################


from pylab import *
from scipy import linspace


#########################################################################################################################
#########################################################################################################################
############################### INITIAL VALUES ####################################
x0 = 0. 

###################################### INTEGRATION PARAMETERS ##################################
Ti = 0.
Ti_to_Tf = 10. 

NT = 1001 # number of time points
dT = Ti_to_Tf/(NT-1)  

################################### ARRAYS and INITIALIZATION ##################################
T = linspace(Ti, Ti + Ti_to_Tf, NT) 

X = zeros(NT) 
X[0] = x0

##################################### ODE SYSTEM FUNCTIONS #####################################
def F(y, time):
   f = 2*y + 3
   return f

########################################### ALGORITHMS ##########################################
def RK4(x, time, timestep):
   y = x
   
   k1 = F(y, time) * timestep
   k2 = F(y + k1/2, time + timestep/2) * timestep
   k3 = F(y + k2/2, time + timestep/2) * timestep
   k4 = F(y + k3, time + timestep) * timestep

   y_new = y + k1/6 + k2/3 + k3/3 + k4/6
   return y_new
   


########################################### STEPPER ############################################
for k in range (NT-1):  # k goes from 0 to NT-2
   X[k+1] = RK4(X[k], T[k], dT)

#########################################################################################################################
#########################################################################################################################

####################################### OTHER PHYSICAL QUANTITIES #################################

############################################ VISUALIZATION #####################################

figure(1)
plotlabel= "X = f(t)"
hold(False)
plot(T, X)
hold(True)
title(plotlabel)
draw()
